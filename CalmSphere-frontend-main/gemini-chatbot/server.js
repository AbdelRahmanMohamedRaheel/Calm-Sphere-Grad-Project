import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import dotenv from 'dotenv';
import { GoogleGenerativeAI } from "@google/generative-ai";

dotenv.config();
const app = express();
const port = 5000;

app.use(cors());
app.use(bodyParser.json());

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Mental health condition classifications with supportive links
const supportiveLinks = {
  "Anxiety": [
    "https://www.youtube.com/watch?v=G0P2L1BbkP0",
    "https://www.youtube.com/watch?v=RdM596wLz00",
    "https://www.youtube.com/watch?v=qUz93CyNIz0"
  ],
  "Depression": [
    "https://www.youtube.com/watch?v=Xu1FMCxoEFc&t=675s",
    "https://www.youtube.com/watch?v=yQu-Ct9-6dg",
    "https://www.youtube.com/watch?v=VlDgowUAyx4"
  ],
  "Study Tips": [
    "https://www.youtube.com/watch?v=TjPFZaMe2yw",
    "https://www.youtube.com/watch?v=LMd0CaNUgHk",
    "https://www.youtube.com/watch?v=Rvey9g0VgY0"
  ]
};

// Function to detect language and return the appropriate response
const detectLanguage = (text) => {
  const arabicPattern = /[\u0600-\u06FF]/;
  return arabicPattern.test(text) ? 'ar' : 'en';
};
const predictMentalHealthCondition = async (prompt) => {
  const modifiedPrompt = `You are a mental health assistant. The user has expressed the following: "${prompt}". 
  Based on this message, classify the user's condition into one of the following categories: 
  - Anxiety 
  - Depression 
  - Study Tips
  Provide only the classification result as a string (e.g., "Anxiety", "Depression", "Study Tips").`;

  const model = genAI.getGenerativeModel({ model: "models/gemini-2.0-flash" });

  const result = await model.generateContent({
    contents: [
      {
        role: "user",
        parts: [
          {
            text: modifiedPrompt
          }
        ]
      }
    ]
  });

  const response = await result.response;
  return response.text().trim();  // Return the classification (Anxiety, Depression, or Study Tips)
};
// Generate dynamic conversation
const generateDynamicConversation = async (condition, prompt) => {
  const modifiedPrompt = `You are a mental health assistant. The patient has expressed the following: "${prompt}". 
  Based on this, ask an empathetic follow-up question to understand their condition better. 
  Help them feel heard and supported.`;

  const model = genAI.getGenerativeModel({ model: "models/gemini-2.0-flash" });

  const result = await model.generateContent({
    contents: [
      {
        role: "user",
        parts: [
          {
            text: modifiedPrompt
          }
        ]
      }
    ]
  });

  const response = await result.response;
  return response.text();  // Return the dynamic response generated by Gemini
};

app.post("/chat", async (req, res) => {
  const prompt = req.body.message;  // The patient's condition or symptoms
  const specialty = req.body.specialty;  // The specialty provided (e.g., "neurology", "cardiology")
  console.log("📩 Received prompt:", prompt);
  console.log("📩 Received specialty:", specialty);

  try {
    // Classify the patient's mental health condition

    let responseMessage = "";

    const mentalHealthCondition = await predictMentalHealthCondition(prompt);

    // Generate dynamic follow-up question based on the condition
    const dynamicQuestion = await generateDynamicConversation(mentalHealthCondition, prompt);

    // Detect language (Arabic or English)
    const language = detectLanguage(prompt);

    // Prepare the supportive response with conversation
    const supportiveMessage = {
      condition: mentalHealthCondition,
      links: supportiveLinks[mentalHealthCondition] || [],
      classification: mentalHealthCondition  // New field for the classification of the feeling
    };

    if (language === 'ar') {
      res.json({
        response: `تم تصنيف حالتك كـ "${mentalHealthCondition}". ${dynamicQuestion}`,
        links: supportiveMessage.links,
        classification: supportiveMessage.classification  // Include the classification in the response
      });
    } else {
      res.json({
        response: `Your condition has been classified as "${mentalHealthCondition}". ${dynamicQuestion}`,
        links: supportiveMessage.links,
        classification: supportiveMessage.classification  // Include the classification in the response
      });
    }
  } catch (err) {
    console.error("❌ Gemini API Error:", err);
    res.status(500).json({ error: "API error", details: err.message });
  }
});

app.listen(port, () => {
  console.log(`🚀 Server running on http://localhost:${port}`);
});
